
TAPL Self Exercises (Ch.8 Typed Arithmetic Expressions)


===================================================================================
Name: Vo Minh Cong
Student ID: 207818
===================================================================================


Study the following topics in the textbook.

 - Syntax of types
 
 - Typing rules

 - Type safety

===================================================================================

Exercises

(Syntax of Types)

 This chpater introduces types as

   Types T ::= Nat | Bool.

 - Describe *informally* what Nat and Bool mean respectively?

 [SOLUTION]

Nat stands for the type of numeric values (nature numbers).

Bool stands for the type of boolean values.


 - Why does the arithmetic PL have only two types?

 [SOLUTION]

As we can see from the evaluation of terms, given 7 rules, there are only 2 types of values that can be evaluated.
The first is the boolean value and the second is the numeric value. 


(Typing relations)

 The typing relation for the arithmetic PL is written as t : T where
 t is a term, T is a type, and ':' is a relation name. 

 Remember that a binary relation R is a 2-place relation on A and B and
 it is a subset of A × B = { (a,b) | a ∈ A and b ∈ B }.

 - Enumerate several elements in the binary relation ':'. 

 [SOLUTION]


Assume set A = {1, 2, 3, ..., n}, B = {1, 2, 3, ..., n}

R is a binary relation between A and B such that the first number equals to the second plus 1

R = {(1, 2), (2, 3), ..., (n-1, n)}

In terms of typing relation, we have P(a, b) : Bool where P(a, b) is a true if (a, b) ∈ R and is false if (a, b) ∉ R.

For instance, 

P(1, 2) : true
P(2, 3) : true

 - Enumerate several elements not in the binary relation ':'. 

 [SOLUTION]

Several elements not in the binary relation which cause P(a, b) to be false.

For instance, 

P(2, 1) : false
P(4, 2) : false

(Typing rules)

 The type inference rules, or shortly typing rules, for the arithmetic PL
 are in Figure 8.2 of the text book or in the slides.

 true : Bool (T-True)  means  (true,Bool) ∈ ':'.

 - Then what does the following inference rule

     t1 : Nat
 ———————————————–  (T-IsZero)
  iszero t1 : Bool
 
 means?

 [SOLUTION]

if (t1, Nat) ∈ ':' then (iszero t1, Bool) ∈ ':'


 - Using the type inference rules, do infer the types of the following terms.

 (1) if true then false else true : ???

 (2) pred (succ (pred (succ 0))) : ???

 (3) if iszero 0 then 0 else pred 0 : ???


 - For each of (1), (2), and (3), write a type derivation tree to justify
   the types in your answer above.

 [SOLUTION]

 (1)

    ———————————— (T-True)  ———————————— (T-False)     ———————————— (T-True)
     true: Bool             false: Bool                   true: Bool
 ———————————————–———————————————–——————————————————–———————————————–———  (T-IF)
                  if true then false else true : Bool




 (2)
                        ————————— (T-Zero)
                          0: Nat
                      ————————————— (T-Succ)
                         succ 0: Nat
                    ————————————————————— (T-Pred)
                      pred (succ 0) : Nat
                ———————————————————————————————— (T-Succ) 
                    succ (pred (succ 0)) : Nat
            —————————–——————————————————–——————————  (T-Pred)
                pred (succ (pred (succ 0))) : Nat


 (3)
      ————————— (T-Zero)                                 ———————— (T-Zero)
        0: Nat                                            0 : Nat
    ———————————— (T-IsZero)  ———————————— (T-Zero)     ———————————— (T-Pred)
     iszero 0: Bool             0 : Nat                   pred 0: Nat
 ———————————————–———————————————–——————————————————–———————————————–———  (T-IF)
                  if iszero 0 then 0 else pred 0 : Nat



 - For a term, pred false, argue why it does not have any type.

 [SOLUTION]


Consider the term `pred t`

Firstly, we need to derive the term using typing rule

    ————————————
      t : Nat
———————————————————— (T-Pred)                     
    pred t : Nat

By T-Pred, the term `pred t` has type if and only if the term t has type Nat.

In this case, t = false has type `Bool` which doesn't match the expected type of T-Pred `Nat`

So the term `pred (false)` does not have any type.


(A concept for type safety property)

 - Explain what is meant by the type safety property of a type
   system, or shortly safety?

 [SOLUTION]

The safety property of type system is defined as a combination of the progess and preservation

The progress means the term is well-typed and never getting stuck. 
And the preservation means the type of the resulting result is well defined.


  An important technique to prove the type safety property is to prove
  the progress and preservation lemmas.

 -  What is the progress lemma?

   [SOLUTION]

The progress lemma is well-term is not stuck.


 -  What is the preservation lemma?

   [SOLUTION]

The preservation lemma is that if a well-typed term takes a step of evaluation, 
then the resulting term is also well typed.

 -  Why can the two lemmas guarantee the type safety property of
    the type system?

   [SOLUTION]

A safety property means that the given term can be evaluated without errors or getting stuck. 
To do that, the preservation ensures the resulting term is well typed which ensures the evaluation 
step can be done without getting stuck.


(Proving type safety property)

 - Write a progress lemma for the arithmetic PL. 

   [SOLUTION]

Suppose t is a well-typed term (that is, t : T for some T).
Then either t is a value or else there is some t' with t → t' .

 - Prove it by induction on typing derivations.
 
   [SOLUTION]


Base case: 1)  ————————— (T-Zero)
                0: Nat 

           2)  ———————————— (T-True)
                true: Bool

           3)  ————————————— (T-False)
                false: Bool

Base-1: 
  t = true and T = Bool. The property holds because true is a value, so t is value

Base-2:
  t = false and T = Bool. The property holds because true is a value, so t is value

Base-3:
  t = 0 and T = Nat. The property holds because 0 is a value, so t is value

Inductive case:


Assume that t1 is a well-typed term then t1 is a value or else there is some t1' with t1 -> t1'
In other words, 
              ▽ 
     Given ————————, t1 is either value or there is some t1' with t1 -> t1'
            t1: T

We have 4 cases to examine:
              ▽                 ▽             ▽
         ————–——————       ————–——————   ————–——————
          t1 : Bool          t2 : T         t3 : T
    1) ———————————————–————————————————————————————–——
            if t1 then t2 else t3 : T

               ▽ 
            ——————–  
            t1: Nat
    2)  ———————————————–——
          succ t1 : Nat
      
               ▽ 
            ——————–  
            t1: Nat
    3)  ———————————————–——
          pred t1 : Nat

               ▽ 
            ——————–  
            t1: Nat
    4)  ———————————————–——
          iszero t1 : Bool

Consider case 1) t = if t1 then t2 else t3
                 if t1 is a value, then if t1 then t2 else t3 is also a value (By E-IFTrue pr E-IFFalse)
                 if t1 is a term, then  t1 -> t1'

                      ————–——————
                       t1 -> t1'
            ———————————————–————————————————————————————–——  (By E-If)
            if t1 then t2 else t3 -> if t1' then t2 else t3


Consider case 2) t = succ t1, t1 : Nat
                 if t1 is a value, then succ t1 is also a value
                 if t2 is a term. then t1 -> t1',                
                         
                     ————————–——  
                      t1 -> t1'
                ———————————————–—————— (By E-Succ)
                  succ t1 : succ t1'

Consider case 3) t = pred t1, t1 : Nat

                 if t1 is a value, then succ t1 is also a value
                 if t1 is a term: t1 -> t1',                
                         
                     ————————–——  
                      t1 -> t1'
                ———————————————–—————— (By E-Pred)
                  pred t1 : pred t1'

Consider case 4) t = iszero t1, t1 : Nat
                 if t1 is a value, then iszero t1 is also a value
                 if t1 is a term: t1 -> t1',                
                 
                     ————————–——  
                      t1 -> t1'
                ———————————————–—————— (By E-IsZero)
                  iszero t1 : pred t1'

 - Write a preservation lemma for the arithmetic PL. 

   [SOLUTION]


  If t : T and t → t', then t' : T

 
 - Prove it by induction on typing derivations. 

   [SOLUTION]
                                                                                ▽
We can proof the lemma by induction on the structure of typing derivations   ——————–       
                                                                              t: T

Base case: 1)  ————————— (T-Zero)
                0: Nat 

           2)  ———————————— (T-True)
                true: Bool

           3)  ————————————— (T-False)
                false: Bool

    Base-1: 
      t = true and T = Bool. The property holds because 0 is a value, so there is relation such that t -> t'

    Base-2:
      t = false and T = Bool. The property holds because 0 is a value, so there is relation such that t -> t'

    Base-3:
      t = 0 and T = Nat. The property holds because 0 is a value, so there is relation such that t -> t'


Inductive case: 


We have 4 cases to examine:
              ▽                 ▽             ▽
         ————–——————       ————–——————   ————–——————
          t1 : Bool          t2 : T         t3 : T
    1) ———————————————–————————————————————————————–——
            if t1 then t2 else t3 : T

               ▽ 
            ——————–  
            t1: Nat
    2)  ———————————————–——
          succ t1 : Nat
      
               ▽ 
            ——————–  
            t1: Nat
    3)  ———————————————–——
          pred t1 : Nat

               ▽ 
            ——————–  
            t1: Nat
    4)  ———————————————–——
          iszero t1 : Bool


Consider case 4)

                 ▽ 
              ——————–  
              t1: Nat
        ———————————————–——–—— and ∃ t' such that iszero t -> t'. So there are 3 subcases that satify the property.
          iszero t1 : Bool


    Case 4-1) E-IsZeroZero: ———————————————–——–——
                              iszero 0 -> true 

    Case 4-2) E-IsZeroSucc: 
                            ———————————————–——–—————— 
                            iszero (succ nv) -> true 

    Case 4-3) E-IsZero:          t1 -> t1'
                          ———————————————–——–—————— 
                            iszero t1 -> iszero t1' 



      
